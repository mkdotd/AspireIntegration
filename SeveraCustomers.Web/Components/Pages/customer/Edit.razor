@page "/customer/edit"
@using Models
@inject NavigationManager NavigationManager
@inject ApiClient CustomerApi

<PageTitle>Edit</PageTitle>

<h1>Edit Customer <a class="btn btn-info float-end" href="/customer/index">Back to List</a></h1>

<hr />
@if (Customer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Customer" OnValidSubmit="UpdateCustomer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Customer.Id" value="@Customer.ID" />
                <div class="mb-3">
                    <label for="Name" class="form-label">Name:</label>
                    <InputText id="Name" @bind-Value="Customer.Name" class="form-control" />
                    <ValidationMessage For="() => Customer.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Number" class="form-label">Number:</label>
                    <InputNumber id="Number" @bind-Value="Customer.Number" class="form-control" />
                    <ValidationMessage For="() => Customer.Number" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="OwnerName" class="form-label">OwnerName:</label>
                    <InputText id="OwnerName" @bind-Value="Customer.OwnerName" class="form-control" />
                    <ValidationMessage For="() => Customer.OwnerName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Website" class="form-label">Website:</label>
                    <InputText id="Website" @bind-Value="Customer.Website" class="form-control" />
                    <ValidationMessage For="() => Customer.Website" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="IndustryName" class="form-label">IndustryName:</label>
                    <InputText id="IndustryName" @bind-Value="Customer.IndustryName" class="form-control" />
                    <ValidationMessage For="() => Customer.IndustryName" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-success">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Customers? Customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Customer ??= await CustomerApi.GetCustomer(Id);

        if (Customer is null)
        {
            NavigationManager.NavigateTo("/customer/index");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCustomer()
    {
        try
        {
            await CustomerApi.UpdateCustomer(Customer.ID, Customer);
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/customer/index");
        }

        NavigationManager.NavigateTo("/customer/index");
    }
}
